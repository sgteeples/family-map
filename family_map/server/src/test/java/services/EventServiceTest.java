package services;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.Statement;

import database_access.Database;
import database_access.DatabaseException;
import requests.FillRequest;

import results.EventResult;

import static org.junit.Assert.*;

public class EventServiceTest {

    private final Database db = new Database();

    /** Before each test we create the database tables so they're available. We also register
     * a user so it will be available for fill later
     */
    @Before
    public void setUp() {
        db.createTables();

        try {
            Connection conn = db.openConnection();
            Statement stmt = conn.createStatement();
            stmt.executeUpdate("INSERT into AuthTokens values (\"authToken\", \"username\")");
            stmt.executeUpdate("INSERT into Users values (\"username\", \"password\", \"email\", " +
                    "\"firstNames\", \"lastName\", \"m\", \"personID\")");
            db.closeConnection(true);
        } catch (Exception e) {
            db.closeConnection(false);
        }
    }

    /** After each test we clear the database tables so we can have a fresh start between tests */
    @After
    public void tearDown() {
        try {
            db.openConnection();
            db.clearTables();
            db.closeConnection(true);
        } catch (DatabaseException e) {
            db.closeConnection(true);
            e.printStackTrace();
        }
    }

    /** We default fill for the current user, and expect that retrieving the user's family events will
     * return the 91 events generated by fill
     */
    @Test
    public void retrieveUserFamilyEvents() {
        FillRequest request = new FillRequest("username", 4);
        new FillService().fill(request);

        EventResult result = new EventService().retrieveUserFamilyEvents("authToken");

        assert(result.getData().length == 91);
    }

    /** We insure that a warning message is returned if we try to get information for an invalid
     * AuthToken - this should never happen because of the AuthToken check in the handler, but
     * we'll do this test to make sure the backup works, and to have a failing test case as per
     * the specs
     */
    @Test
    public void retrieveUserFamilyEventsFailing() {
        FillRequest request = new FillRequest("username", 4);
        new FillService().fill(request);

        EventResult result = new EventService().retrieveUserFamilyEvents("fakeToken");

        assertEquals("Invalid authorization token", result.getMessage());
    }
}